//"Author-Alchemist_100"


#include <bits/stdc++.h> 
#define pb push_back 
#define ll long long int
#define endl '\n'
using namespace std; 


//always declare visted array and adjancency list as global

vector<bool> v;// for marking nodes visited or not 
vector<vector<int> > g; // adjancency list

void edge(int a, int b) 
{ 
	g[a].pb(b); // directed graph

	// for undirected graph add this line 
	// g[b].pb(a); 
} 

void dfs(int u) 
{ 
	v[u]=true;

	cout<<u<<" ";

	 for (auto i = g[u].begin(); i != g[u].end(); i++) { 
            if (!v[*i]) { 
                dfs(*i); // recursive call
            } 
        } 
} 

// Driver code 
int main() 
{ 
	int n, e; 
	cin >> n >> e; 

	v.assign(n, false); // assign entire value
	g.assign(n, vector<int>()); 

	int a, b; 
	for (int i = 0; i < e; i++) { 
		cin >> a >> b; 
		edge(a, b); 
	} 
// this loop will help to handle disconnected graph
	for (int i = 0; i < n; i++) { 
		if (!v[i]) // when node is not already visted then we will call bfs
			dfs(i); 
	} 

	return 0; 
} 
