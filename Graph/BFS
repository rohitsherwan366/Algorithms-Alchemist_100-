//Author-Alchemist_100 


#include <bits/stdc++.h> 
#define pb push_back 
#define ll long long int
#define endl '\n'
using namespace std; 


//always declare visted array and adjancency list as global

vector<bool> v;// for marking nodes visited or not 
vector<vector<int> > g; // adjancency list

void edge(int a, int b) 
{ 
	g[a].pb(b); // directed graph

	// for undirected graph add this line 
	// g[b].pb(a); 
} 

void bfs(int u) 
{ 
	queue<int> q; // using queue

	q.push(u); 
	v[u] = true; // set source node as true

	while (!q.empty()) {// while our queue is not empty 

		int f = q.front(); 
		q.pop(); 

		cout << f << " "; 

		// Enqueue all adjacent of f and mark them visited
        // use auto for this it would be easy
        // i will a pointer and i* will gives its value at that place 

		for (auto i = g[f].begin(); i != g[f].end(); i++) { 
			if (v[*i]==false) { 
				q.push(*i); 
				v[*i] = true; 
			} 
		} 
	}
	
} 

// Driver code 
int main() 
{ 
	int n, e; 
	cin >> n >> e; 

	v.assign(n, false); // assign entire value(used for initialization)
	g.assign(n, vector<int>()); 

	int a, b; 
	for (int i = 0; i < e; i++) { 
		cin >> a >> b; 
		edge(a, b); 
	} 

	for (int i = 0; i < n; i++) { 
		if (!v[i]) // when root is not already visted then we will call bfs
			bfs(i); 
	} 

	return 0; 
} 
